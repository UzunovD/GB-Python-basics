__author__ = 'Узунов Дмитрий'

#NORMAL

# Написать две программы:
# Одна принимает через argparse число N и текст S и в цикле N раз выводит S в консоль
# А вторая программа принимает через input число M
# И указанное кол-во раз спрашивает через input N и S и запускает первую программу через os.system

# 2 программа

import os

m = int(input("Введите число запросов запуска n_print_s: "))

for i in range(m):
    n = int(input("Введите число повторений вывода: "))
    s = input("Введите текс для вывода: ")
    s = s.replace(" ", "_")  # потаму что с пробелами все плохо
    os.system(f"python n_print_s.py {n} {s}")

# Всякий раз, когда вы вызываете os.system со строкой, вы вызываете оболочку и
# получаете расширение оболочки независимо от того, хотите вы этого или нет.
# Это может привести к неожиданным проблемам безопасности при запуске вставки
# переменных (в частности, user- предоставленных переменных).
# Вместо того, чтобы использовать os.system, используйте subprocess.call() или
# subprocess.check_call() и передайте ему кортеж или список аргументов.
# Когда вы передаете ему список или кортеж, ему не нужно запускать оболочку для
# обработки аргументов.
# Используя список или кортеж, вы можете легко иметь переменные в аргументах.


import subprocess

m = int(input("Введите число запросов запуска n_print_s: "))

for i in range(m):
    n = int(input("Введите число повторений вывода: "))
    s = input("Введите текс для вывода: ")
    args = ["python", "n_print_s.py", f"{n}", s]
    subprocess.call(args)



# 1 программа

# имя программы: n_print_s.py
import argparse

parser = argparse.ArgumentParser(description= "Печатальщик переданного "
                                              "текста N раз")
parser.add_argument('n', type=int, help="Число повторений вывода")
parser.add_argument('s', type=str, help="Текс для вывода")
args = parser.parse_args()

args.s = args.s.replace("_", " ")  # потаму что с " " при os.system все плохо

for i in range(args.n):
    print(args.s)
